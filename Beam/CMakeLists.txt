cmake_minimum_required(VERSION 3.8)
project(Beam)
execute_process(COMMAND "pwd" OUTPUT_VARIABLE PWD)
string(STRIP "${PWD}" PWD)
file(TO_CMAKE_PATH "${PWD}" PWD)
file(MAKE_DIRECTORY "${PWD}/Dependencies")
set(DEPENDENCIES_PATH "${PWD}/Dependencies")
if(WIN32)
  execute_process(COMMAND cmd /c "CALL ${CMAKE_CURRENT_LIST_DIR}/setup.bat"
    WORKING_DIRECTORY "${PWD}/Dependencies")
endif()
include(Config/dependencies.cmake)
include_directories(${BEAM_INCLUDE_PATH})
include_directories(${BOOST_INCLUDE_PATH})
include_directories(${CATCH_INCLUDE_PATH})
include_directories(${CPPUNIT_INCLUDE_PATH})
include_directories(${CRYPTOPP_INCLUDE_PATH})
include_directories(${LUA_INCLUDE_PATH})
include_directories(${MYSQL_INCLUDE_PATH})
include_directories(${MYSQLPP_INCLUDE_PATH})
include_directories(${OPEN_SSL_INCLUDE_PATH})
include_directories(${SQLITE_INCLUDE_PATH})
include_directories(${TCLAP_INCLUDE_PATH})
include_directories(${VIPER_INCLUDE_PATH})
include_directories(${YAML_INCLUDE_PATH})
include_directories(${ZLIB_INCLUDE_PATH})

link_directories(${BOOST_DEBUG_PATH})
link_directories(${BOOST_OPTIMIZED_PATH})

set(CMAKE_BUILD_TYPE ${BEAM_BUILD_TYPE})
set(CMAKE_LIBRARY_FLAGS "")

if(MSVC)
  set(CMAKE_LIBRARY_FLAGS "/LTCG")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX /bigobj /std:c++17 /Wv:18")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
  set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
  add_definitions(-DBOOST_CONFIG_SUPPRESS_OUTDATED_MESSAGE)
  add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
  add_definitions(-D_HAS_AUTO_PTR_ETC=1)
  add_definitions(-DMYSQLPP_NO_DLL)
  add_definitions(-DNOMINMAX)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
  add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
  add_definitions(-D_WIN32_WINNT=0x0501)
  add_definitions(-DWIN32_LEAN_AND_MEAN)
  add_definitions(/experimental:external)
  add_definitions(/external:W0)
  add_definitions(/external:anglebrackets)
endif()
if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX OR
    ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=c++17")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -O2 -DNDEBUG")
endif()
if(CYGWIN)
  add_definitions(-D__USE_W32_SOCKETS)
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL "SunOS")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_RELEASE} -pthreads")
endif()

add_subdirectory(Config/Beam)
add_subdirectory(Config/Codecs)
add_subdirectory(Config/Collections)
add_subdirectory(Config/IO)
add_subdirectory(Config/Parsers)
add_subdirectory(Config/Python)
add_subdirectory(Config/Queries)
add_subdirectory(Config/Queues)
add_subdirectory(Config/Reactors)
add_subdirectory(Config/RegistryService)
add_subdirectory(Config/Serialization)
add_subdirectory(Config/ServiceLocator)
add_subdirectory(Config/Services)
add_subdirectory(Config/Stomp)
add_subdirectory(Config/Tasks)
add_subdirectory(Config/TimeService)
add_subdirectory(Config/UidService)
add_subdirectory(Config/WebServices)
